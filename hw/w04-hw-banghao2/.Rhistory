sy
se <- summary(model)$sigma
se
r_squared = summary(model)$r.squared
r_squared
ci_sugar = confint(model, "Sugar", level = 0.90)
ci_sugar
ci_intercept <- confint(model, "(Intercept)", level = 0.95)
ci_intercept
new_data <- data.frame(Fat = 15, Sugar = 0, Sodium = 260)
ci_pred <- predict(model, newdata = new_data, interval = "confidence", level = 0.99)
ci_pred
data = read.csv("nutrition-2018.csv")
model = lm(Calories ~ Fat + Sugar + Sodium, data = data)
f_test = summary(model)
f_statistic = f_test$fstatistic[1]
f_statistic
p_value = pf(f_statistic, f_test$fstatistic[2], f_test$fstatistic[3], lower.tail = FALSE)
p_value
coef(model)
filet_o_fish = data.frame(Fat = 18, Sugar = 5, Sodium = 580)
predicted_calories = predict(model, newdata = filet_o_fish)
predicted_calories
sy <- sd(data$Calories)
sy
se <- summary(model)$sigma
se
r_squared = summary(model)$r.squared
r_squared
ci_sugar = confint(model, "Sugar", level = 0.90)
ci_sugar
ci_intercept <- confint(model, "(Intercept)", level = 0.95)
ci_intercept
new_data <- data.frame(Fat = 15, Sugar = 0, Sodium = 260)
ci_pred <- predict(model, newdata = new_data, interval = "confidence", level = 0.99)
ci_pred
new_data <- data.frame(Fat = 11, Sugar = 2, Sodium = 340)
pi_pred <- predict(model, newdata = new_data, interval = "prediction", level = 0.99)
pi_pred
data = read.csv("nutrition-2018.csv")
model = lm(Calories ~ Fat + Sugar + Sodium, data = data)
f_test = summary(model)
f_statistic = f_test$fstatistic[1]
f_statistic
p_value = pf(f_statistic, f_test$fstatistic[2], f_test$fstatistic[3], lower.tail = FALSE)
p_value
coef(model)
filet_o_fish = data.frame(Fat = 18, Sugar = 5, Sodium = 580)
predicted_calories = predict(model, newdata = filet_o_fish)
predicted_calories
sy <- sd(data$Calories)
sy
se <- summary(model)$sigma
se
r_squared = summary(model)$r.squared
r_squared
ci_sugar = confint(model, "Sugar", level = 0.90)
ci_sugar
ci_intercept <- confint(model, "(Intercept)", level = 0.95)
ci_intercept
new_data <- data.frame(Fat = 15, Sugar = 0, Sodium = 260)
ci_pred <- predict(model, newdata = new_data, interval = "confidence", level = 0.99)
ci_pred
new_data <- data.frame(Fat = 11, Sugar = 2, Sodium = 340)
pi_pred <- predict(model, newdata = new_data, interval = "prediction", level = 0.99)
pi_pred
goalies = read.csv("goalies17.csv")
goalies = goalies[, !(names(goalies) %in% c("Player", "GS", "L", "TOL", "SV_PCT", "GAA"))]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_test
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
names(f_test)
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_test["F"]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_test["F"][2]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_test["F"][[2]]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_test["F"]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_test["F"][2, ]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_test
f_statistic =  f_test["F"][2, ]
f_statistic =  f_test["F"][2, ]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_test
f_statistic =  f_test["F"][2, ]
f_statistic =  f_test["Pr(>F)"][2, ]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_test
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
data = read.csv("nutrition-2018.csv")
model = lm(Calories ~ Fat + Sugar + Sodium, data = data)
f_test = summary(model)
f_statistic = f_test$fstatistic[1]
f_statistic
p_value = pf(f_statistic, f_test$fstatistic[2], f_test$fstatistic[3], lower.tail = FALSE)
p_value
coef(model)
filet_o_fish = data.frame(Fat = 18, Sugar = 5, Sodium = 580)
predicted_calories = predict(model, newdata = filet_o_fish)
predicted_calories
sy <- sd(data$Calories)
sy
se <- summary(model)$sigma
se
r_squared = summary(model)$r.squared
r_squared
ci_sugar = confint(model, "Sugar", level = 0.90)
ci_sugar
ci_intercept <- confint(model, "(Intercept)", level = 0.95)
ci_intercept
new_data <- data.frame(Fat = 15, Sugar = 0, Sodium = 260)
ci_pred <- predict(model, newdata = new_data, interval = "confidence", level = 0.99)
ci_pred
new_data <- data.frame(Fat = 11, Sugar = 2, Sodium = 340)
pi_pred <- predict(model, newdata = new_data, interval = "prediction", level = 0.99)
pi_pred
goalies = read.csv("goalies17.csv")
goalies = goalies[, !(names(goalies) %in% c("Player", "GS", "L", "TOL", "SV_PCT", "GAA"))]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
model3 <- lm(W ~ ., data = goalies)
f_test <- anova(model2, model3)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
data = read.csv("nutrition-2018.csv")
model = lm(Calories ~ Fat + Sugar + Sodium, data = data)
f_test = summary(model)
f_statistic = f_test$fstatistic[1]
f_statistic
p_value = pf(f_statistic, f_test$fstatistic[2], f_test$fstatistic[3], lower.tail = FALSE)
p_value
coef(model)
filet_o_fish = data.frame(Fat = 18, Sugar = 5, Sodium = 580)
predicted_calories = predict(model, newdata = filet_o_fish)
predicted_calories
sy <- sd(data$Calories)
sy
se <- summary(model)$sigma
se
r_squared = summary(model)$r.squared
r_squared
ci_sugar = confint(model, "Sugar", level = 0.90)
ci_sugar
ci_intercept <- confint(model, "(Intercept)", level = 0.95)
ci_intercept
new_data <- data.frame(Fat = 15, Sugar = 0, Sodium = 260)
ci_pred <- predict(model, newdata = new_data, interval = "confidence", level = 0.99)
ci_pred
new_data <- data.frame(Fat = 11, Sugar = 2, Sodium = 340)
pi_pred <- predict(model, newdata = new_data, interval = "prediction", level = 0.99)
pi_pred
goalies = read.csv("goalies17.csv")
goalies = goalies[, !(names(goalies) %in% c("Player", "GS", "L", "TOL", "SV_PCT", "GAA"))]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
model3 <- lm(W ~ ., data = goalies)
f_test <- anova(model2, model3)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
data = read.csv("nutrition-2018.csv")
model = lm(Calories ~ Fat + Sugar + Sodium, data = data)
f_test = summary(model)
f_statistic = f_test$fstatistic[1]
f_statistic
p_value = pf(f_statistic, f_test$fstatistic[2], f_test$fstatistic[3], lower.tail = FALSE)
p_value
coef(model)
filet_o_fish = data.frame(Fat = 18, Sugar = 5, Sodium = 580)
predicted_calories = predict(model, newdata = filet_o_fish)
predicted_calories
sy <- sd(data$Calories)
sy
se <- summary(model)$sigma
se
r_squared = summary(model)$r.squared
r_squared
ci_sugar = confint(model, "Sugar", level = 0.90)
ci_sugar
ci_intercept <- confint(model, "(Intercept)", level = 0.95)
ci_intercept
new_data <- data.frame(Fat = 15, Sugar = 0, Sodium = 260)
ci_pred <- predict(model, newdata = new_data, interval = "confidence", level = 0.99)
ci_pred
new_data <- data.frame(Fat = 11, Sugar = 2, Sodium = 340)
pi_pred <- predict(model, newdata = new_data, interval = "prediction", level = 0.99)
pi_pred
goalies = read.csv("goalies17.csv")
goalies = goalies[, !(names(goalies) %in% c("Player", "GS", "L", "TOL", "SV_PCT", "GAA"))]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
model3 = lm(W ~ ., data = goalies)
f_test = anova(model2, model3)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
model_summary <- summary(model3)
t_statistic <- model_summary$coefficients["SV", "t value"]
p_value <- model_summary$coefficients["SV", "Pr(>|t|)"]
model_summary <- summary(model3)
t_statistic <- model_summary$coefficients["SV", "t value"]
t_statistic
p_value <- model_summary$coefficients["SV", "Pr(>|t|)"]
p_value
data = read.csv("nutrition-2018.csv")
model = lm(Calories ~ Fat + Sugar + Sodium, data = data)
f_test = summary(model)
f_statistic = f_test$fstatistic[1]
f_statistic
p_value = pf(f_statistic, f_test$fstatistic[2], f_test$fstatistic[3], lower.tail = FALSE)
p_value
coef(model)
filet_o_fish = data.frame(Fat = 18, Sugar = 5, Sodium = 580)
predicted_calories = predict(model, newdata = filet_o_fish)
predicted_calories
sy <- sd(data$Calories)
sy
se <- summary(model)$sigma
se
r_squared = summary(model)$r.squared
r_squared
ci_sugar = confint(model, "Sugar", level = 0.90)
ci_sugar
ci_intercept <- confint(model, "(Intercept)", level = 0.95)
ci_intercept
new_data <- data.frame(Fat = 15, Sugar = 0, Sodium = 260)
ci_pred <- predict(model, newdata = new_data, interval = "confidence", level = 0.99)
ci_pred
new_data <- data.frame(Fat = 11, Sugar = 2, Sodium = 340)
pi_pred <- predict(model, newdata = new_data, interval = "prediction", level = 0.99)
pi_pred
goalies = read.csv("goalies17.csv")
goalies = goalies[, !(names(goalies) %in% c("Player", "GS", "L", "TOL", "SV_PCT", "GAA"))]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
model3 = lm(W ~ ., data = goalies)
f_test = anova(model2, model3)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
model_summary <- summary(model3)
t_statistic <- model_summary$coefficients["SV", "t value"]
t_statistic
p_value <- model_summary$coefficients["SV", "Pr(>|t|)"]
p_value
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
X = cbind(1, Ozone[, c("wind", "humidity", "temp")])
y = Ozone$ozone
beta_hat_no_lm = solve(t(X) %*% X) %*% t(X) %*% y
data = read.csv("nutrition-2018.csv")
model = lm(Calories ~ Fat + Sugar + Sodium, data = data)
f_test = summary(model)
f_statistic = f_test$fstatistic[1]
f_statistic
p_value = pf(f_statistic, f_test$fstatistic[2], f_test$fstatistic[3], lower.tail = FALSE)
p_value
coef(model)
filet_o_fish = data.frame(Fat = 18, Sugar = 5, Sodium = 580)
predicted_calories = predict(model, newdata = filet_o_fish)
predicted_calories
sy <- sd(data$Calories)
sy
se <- summary(model)$sigma
se
r_squared = summary(model)$r.squared
r_squared
ci_sugar = confint(model, "Sugar", level = 0.90)
ci_sugar
ci_intercept <- confint(model, "(Intercept)", level = 0.95)
ci_intercept
new_data <- data.frame(Fat = 15, Sugar = 0, Sodium = 260)
ci_pred <- predict(model, newdata = new_data, interval = "confidence", level = 0.99)
ci_pred
new_data <- data.frame(Fat = 11, Sugar = 2, Sodium = 340)
pi_pred <- predict(model, newdata = new_data, interval = "prediction", level = 0.99)
pi_pred
goalies = read.csv("goalies17.csv")
goalies = goalies[, !(names(goalies) %in% c("Player", "GS", "L", "TOL", "SV_PCT", "GAA"))]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
model3 = lm(W ~ ., data = goalies)
f_test = anova(model2, model3)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
model_summary <- summary(model3)
t_statistic <- model_summary$coefficients["SV", "t value"]
t_statistic
p_value <- model_summary$coefficients["SV", "Pr(>|t|)"]
p_value
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
X = cbind(1, Ozone[, "wind"], Ozone[, "humidity"], Ozone[, "temp"])
y = Ozone$ozone
beta_hat_no_lm = solve(t(X) %*% X) %*% t(X) %*% y
beta_hat_no_lm = as.vector(beta_hat_no_lm)
sum_squared_coefficients = sum(beta_hat_no_lm ^ 2)
sum_squared_coefficients
model_lm = lm(ozone ~ wind + humidity + temp, data = Ozone)
beta_hat_lm = as.vector(coef(model_lm))
sum_squared_coefficients_lm = sum(beta_hat_lm ^ 2)
model_lm = lm(ozone ~ wind + humidity + temp, data = Ozone)
beta_hat_lm = as.vector(coef(model_lm))
sum_squared_coefficients_lm = sum(beta_hat_lm ^ 2)
sum_squared_coefficients_lm
all.equal(sum_squared_coefficients, sum_squared_coefficients_lm)
y_hat = X %*% beta_hat_no_lm
residuals = y - y_hat
n = nrow(X)
p = ncol(X)
df = n - p
s_e_no_lm = sqrt(sum(residuals^2) / df)
model_lm = lm(ozone ~ wind + humidity + temp, data = Ozone)
s_e_lm = summary(model_lm)$sigma
all.equal(s_e_no_lm, s_e_lm)
y_mean = mean(y)
TSS = sum((y - y_mean)^2)
RSS = sum(residuals^2)
R_squared_no_lm = 1 - (RSS / TSS)
model_lm = lm(ozone ~ wind + humidity + temp, data = Ozone)
R_squared_lm = summary(model_lm)$r.squared
y_mean = mean(y)
TSS = sum((y - y_mean)^2)
RSS = sum(residuals^2)
R_squared_no_lm = 1 - (RSS / TSS)
model_lm = lm(ozone ~ wind + humidity + temp, data = Ozone)
R_squared_lm = summary(model_lm)$r.squared
all.equal(R_squared_no_lm, R_squared_lm)
# load required package, remove "name" variable
library(ISLR)
Auto = subset(Auto, select = -c(name))
dim(Auto)
data = read.csv("nutrition-2018.csv")
model = lm(Calories ~ Fat + Sugar + Sodium, data = data)
f_test = summary(model)
f_statistic = f_test$fstatistic[1]
f_statistic
p_value = pf(f_statistic, f_test$fstatistic[2], f_test$fstatistic[3], lower.tail = FALSE)
p_value
coef(model)
filet_o_fish = data.frame(Fat = 18, Sugar = 5, Sodium = 580)
predicted_calories = predict(model, newdata = filet_o_fish)
predicted_calories
sy <- sd(data$Calories)
sy
se <- summary(model)$sigma
se
r_squared = summary(model)$r.squared
r_squared
ci_sugar = confint(model, "Sugar", level = 0.90)
ci_sugar
ci_intercept <- confint(model, "(Intercept)", level = 0.95)
ci_intercept
new_data <- data.frame(Fat = 15, Sugar = 0, Sodium = 260)
ci_pred <- predict(model, newdata = new_data, interval = "confidence", level = 0.99)
ci_pred
new_data <- data.frame(Fat = 11, Sugar = 2, Sodium = 340)
pi_pred <- predict(model, newdata = new_data, interval = "prediction", level = 0.99)
pi_pred
goalies = read.csv("goalies17.csv")
goalies = goalies[, !(names(goalies) %in% c("Player", "GS", "L", "TOL", "SV_PCT", "GAA"))]
model1 = lm(W ~ GA + SV, data = goalies)
model2 = lm(W ~ GA + SV + SA + MIN + SO, data = goalies)
f_test = anova(model1, model2)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
model3 = lm(W ~ ., data = goalies)
f_test = anova(model2, model3)
f_statistic =  f_test["F"][2, ]
f_statistic
p_value =  f_test["Pr(>F)"][2, ]
p_value
model_summary <- summary(model3)
t_statistic <- model_summary$coefficients["SV", "t value"]
t_statistic
p_value <- model_summary$coefficients["SV", "Pr(>|t|)"]
p_value
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
X = cbind(1, Ozone[, "wind"], Ozone[, "humidity"], Ozone[, "temp"])
y = Ozone$ozone
beta_hat_no_lm = solve(t(X) %*% X) %*% t(X) %*% y
beta_hat_no_lm = as.vector(beta_hat_no_lm)
sum_squared_coefficients = sum(beta_hat_no_lm ^ 2)
sum_squared_coefficients
model_lm = lm(ozone ~ wind + humidity + temp, data = Ozone)
beta_hat_lm = as.vector(coef(model_lm))
sum_squared_coefficients_lm = sum(beta_hat_lm ^ 2)
sum_squared_coefficients_lm
all.equal(sum_squared_coefficients, sum_squared_coefficients_lm)
y_hat = X %*% beta_hat_no_lm
residuals = y - y_hat
n = nrow(X)
p = ncol(X)
df = n - p
s_e_no_lm = sqrt(sum(residuals^2) / df)
model_lm = lm(ozone ~ wind + humidity + temp, data = Ozone)
s_e_lm = summary(model_lm)$sigma
all.equal(s_e_no_lm, s_e_lm)
y_mean = mean(y)
TSS = sum((y - y_mean)^2)
RSS = sum(residuals^2)
R_squared_no_lm = 1 - (RSS / TSS)
model_lm = lm(ozone ~ wind + humidity + temp, data = Ozone)
R_squared_lm = summary(model_lm)$r.squared
all.equal(R_squared_no_lm, R_squared_lm)
# load required package, remove "name" variable
library(ISLR)
Auto = subset(Auto, select = -c(name))
set.seed(22)
auto_trn_idx = sample(1:nrow(Auto), 290)
auto_trn = Auto[auto_trn_idx, ]
auto_tst = Auto[-auto_trn_idx, ]
rmse = function(actual, predicted) {
sqrt(mean((actual - predicted)^2))
}
model1 <- lm(mpg ~ ., data = auto_trn)
train_rmse1 <- rmse(auto_trn$mpg, predict(model1, auto_trn))
test_rmse1 <- rmse(auto_tst$mpg, predict(model1, auto_tst))
model2 <- lm(mpg ~ displacement, data = auto_trn)
train_rmse2 <- rmse(auto_trn$mpg, predict(model2, auto_trn))
test_rmse2 <- rmse(auto_tst$mpg, predict(model2, auto_tst))
model3 <- lm(mpg ~ weight + horsepower, data = auto_trn)
train_rmse3 <- rmse(auto_trn$mpg, predict(model3, auto_trn))
test_rmse3 <- rmse(auto_tst$mpg, predict(model3, auto_tst))
model4 <- lm(mpg ~ weight + year + origin, data = auto_trn)
train_rmse4 <- rmse(auto_trn$mpg, predict(model4, auto_trn))
test_rmse4 <- rmse(auto_tst$mpg, predict(model4, auto_tst))
model5 <- lm(mpg ~ weight + horsepower + year + origin, data = auto_trn)
train_rmse5 <- rmse(auto_trn$mpg, predict(model5, auto_trn))
test_rmse5 <- rmse(auto_tst$mpg, predict(model5, auto_tst))
library(knitr)
results <- data.frame(
Model = c("1. All predictors",
"2. Only displacement",
"3. Weight and horsepower",
"4. Weight, year, and origin",
"5. Non-linear weight, year, and origin"),
Train_RMSE = c(2.87, 4.46, 3.23, 3.05, 2.95),
Test_RMSE = c(3.38, 4.51, 3.42, 3.27, 3.23)
)
kable(results, format = "markdown",
col.names = c("Model", "Train RMSE", "Test RMSE"),
align = c("l", "r", "r"),
digits = 2)
